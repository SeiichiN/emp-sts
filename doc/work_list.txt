作業手順

1) controller.IndexController.java を作成

2) templates.index.html を作成

3) SessionController.java を作成

4) templates.session.login.html を作成

5) form.LoginForm.java を作成。
   このクラスでログインユーザーを表現する。
    userIdは int、passwordは String
   
6) SessionController.java の doLoginメソッドの引数を LoginForm form とする。

7) sessionスコープを使う。
   LoginFormから getUserId() getPassword() で受け取り、もしOKなら、
   LoginFormインスタンスをセッションスコープに送る。
   
================ データベース ===============================

まず、サンプル・テーブルを作成する。

jdbcドライバをローカルに設置。

8) application.properties にデータベース接続情報を記述。

9) pom.xml に JPA と JDBC(ojdbc7.jar) の使用を記述。
   ojdbc7.jar は
    Oracle Database 12.1.0.2 JDBC Driver & UCP Downloads
    https://www.oracle.com/technetwork/database/features/jdbc/default-2280470.html?ssSourceSiteId=otnjp
    からダウンロード。
   この外部jarは、centralリポジトリにないので、直接ローカルに配置しなくてはならない。
   
   ojdbc7.jar は src/main/resources/lib に置いた。
   
   その pom.xml の記述は以下。
   
	<dependency>
		<groupId>com.oracle</groupId>
		<artifactId>ojdbc7</artifactId>
		<version>12.1.0.2</version>
		<scope>system</scope>
		<systemPath>${basedir}/src/main/resources/lib/ojdbc7.jar</systemPath>
	</dependency>
		
	また、${basedir} を定義するために、pom.xml の <properties> に以下を追加。
   
   <properties>
        <version>1.8</version>
   		<basedir>C:/Users/user/git/emp-sts</basedir>     <!-- 追加 -->
   </properties>

10) エンティティの作成

   アノテーションがいろいろ出てくる。
   今回は entity/Emp.java という名前で作成。

   @Entity -- クラスにつけるアノテーション。これでエンティティとなる。
   @Table(name="emp") -- データベースのテーブルを指定。name指定が無ければ、クラス名がそのままテーブル名として使われる。

   @GeneratedValue の効果がまだ不明。

   @Id -- primary key として設定される。
   @Column - テーブルの各カラム名と結びつけられる。
   ゲッター・セッターを作成。特に、ゲッターが無いと、エンティティの各値を取り出せない。
   
   
11) リポジトリの作成
   EmpRepository として作成。
   リポジトリは「倉庫」という意味。
   通常 エンティティ名Repository.java という名称にするようである。
   このインターフェースを作成するだけで、DRUD操作が可能となるのは、すごい。
   

ここまでで、データベースを操作するための準備はできている。
あとは、コントローラを作成して、ユーザーからの要求を受け付ける。

12) コントローラの作成
   EmpController として作成。
   これは、作成したリポジトリの findAll() メソッドを使った処理である。

   クラスに @Controller アノテーションを指定。

   EmpRepository repository に @Autowired を指定。
   このアノテーションにより、repositoryに適切なクラスをインスタンス化してセットしてくれる。

   @RequestMappingアノテーションで、ユーザーからのURL指定を設定する。
   そのアノテーションが付与されたメソッドは引数に Model をもつ。
   
   この場合、Modelというインターフェースで、リクエストスコープに値を保存できる。そのやり方は、model.addAttribute("emps", repository.findAll()) である。
   これにより、ビューに model が 引き渡される。実際は、"emps" という変数名でその model を取得できる。

13) ビューの作成
   src/main/resources/templates/emps/emp_list.html を作成。

   ビューでは、${emps} で、リクエストスコープの値を取得できる。
   今回は、List<Emp> というリストとなっている。
   
   (注意) 最初、emp_list.html で <tr th:each="emp: ${emps}"> のところ、
   emp が null となって、表示されたなかった。
   これは、entity/Emp.java に、ゲッター・セッターがなかったから。


14) 条件検索(主キーによる検索)

    コントローラにメソッドを追加。
    今回の場合は、EmpController.java に追加する。

    @RequestMapping("/emps/getOne/{empno}") というアノテーションをつける。

    @RequestMapping("/emps/getOne/{empno}")
    public String showEmp( @PathVariable int empno, Model model )

    となる。

    ユーザからのURL指定で empno (数字が期待されている) を取得している。

    インスタンスは repository.getOne(empno) で取得できる。
    それを model.addAttribute("emp", repository.getOne(empno)) でリクエストスコープに保存している。



15) 任意のキーによる検索

    今回は、sal(給与)をキーとして検索してみる。

    リポジトリにメソッドを追加。
    (リポジトリにデフォルトで用意されているメドッソではないから)
    
    List<Item> findBySal( Integer sal );

    コントローラにメソッドを追加。

    @RequestMapping("/emps/findBySal/{sal}"
    public String showEmpListBySal( @PathVariable int sal, Model model ) {
        model.addAttribute("emps", repository.findBySal(sal));
        return "emps/emp_list";
    }

    http://localhost:7777/emp/emps/findBySal/720


16) 複数の条件による検索

    担当(job) と 年齢(age) で検索してみる。

    リポジトリにメソッドを追加。
    List<Item> findByJobAndAge( String job, Integer age );

    コントローラにメソッドを追加。
    @RequestMapping("/items/findByJobAndAge/{job}/{age}")
    public String showItemListByJobAndAge(
                @PathVariable String job,
                @PathVariable int age,
                Model model ) {
            model.addAttribute("emps",
                               repository.findByJobAndAge(job, age));
            return "emps/emp_list";
    }

    http://localhost:7777/emp/emps/findByJobAndAge/総務/30

17) あいまい検索

    名前(ename) を あいまい検索してみる。

    リポジトリにメソッドを追加
    List<Item> findByEnameLike( String ename );

    コントローラにメソッドを追加
    @RequestMapping("/items/findByEnameLike/{ename}")
    public String showItemListByEnameLike( @PathVariable String ename,
                                           Model model ) {
        model.addAttribute("emps",
                           repository.findByEnameLike("%" + ename + "%"));
        return "emps/emp_list";
    }

    http://loalhost:7777/emp/emps/findByEnameLike/山

    社員一覧
    社員No    名前    担当 給与 年齢 所属
    1003   山田雪子   総務 600  31   1
    1005   山本太郎   技術 900  36   1
    1006   山田一太   総務 510  22   1
    1007   東山由紀子 経理 560  45   1


18) 新規登録

    a) Formクラスを作る
      Form クラスは、ビューで submitすると、このクラスに値がセットされる。

    b) コントローラを作る
      まず、/items/create/input というURLを受け取ったら、ビューに渡す処理を作る。
      それから、ビューから POST で Formクラスのインスタンスを貰ったら、それをItemクラスのインスタンスにセットして、リポジトリに渡す処理を作る。

    c) ビューを作る。
      id については、自動生成しているので、formは作らない。 --> 失敗
      もともとのサンプルデータが 1001 から始まっているので、Empクラスの
      private Integer empno に設定した
      @GeneratedValue(.....)
      @SequenceGenerator(.....)
      がうまく動かない。

      EmpControllerクラスの createCompleteメソッドの中の
      repository.save(emp); のところで
          ORA-02289: 順序が存在しません。
      というエラーが出る。

      (解決策)
      @GeneratedValue(...) と @SequenceGenerator(...) は諦める。
      (削除ないしはコメントアウト)

      ビュー(create_input.html) にて、empno も入力することにする。

      これでうまく動く。

      http://localhost:7777/emp/emps/create/input -- フォームを呼び出す。
      その後、「登録」すると、入力したデータが表示される。


;; 修正時刻: Tue Feb 23 17:08:54 2021
